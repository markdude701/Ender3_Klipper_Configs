### MACROS
[gcode_macro NOZZLE_PRIME_LINE]
gcode:
  RESPOND TYPE=command MSG='Start Nozzle Prime Line'
  {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(250)|float %}
  G28 ; home all axis
  G1 Z50 F240
  G1 X2.0 Y10 F3000
  M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
  M190 S{BED_TEMP} ; wait for bed temp to stabilize
  G1 Z0.28 F240
  G92 E0
  G1 X2.0 Y140 E10 F1500 ; prime the nozzle
  G1 X2.3 Y140 F5000
  G92 E0
  G1 X2.3 Y10 E10 F1200 ; prime the nozzle
  G92 E0



[gcode_macro PRE_START_PRINT]
gcode:
  M118 E1 Pre Start Print
  {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  G90 ; use absolute coordinates
  M83 ; extruder relative mode
  #M104 S150 ; set temporary nozzle temp to prevent oozing during homing
  #M190 S{BED_TEMP} ; wait for bed temp to stabilize
  #G4 S30 ; allow partial nozzle warmup
  G28 ; home all axis

[gcode_macro NEW_START_PRINT]
gcode:
  M118 E1 New Start Print
  #DOULBE_Z_TILT
  PRE_START_PRINT
  NOZZLE_PRIME_LINE
  START_PRINT

[gcode_macro START_PRINT]
gcode:
  M118 E1 Start Print
  G92 E0 # RESET EXTRUDER
  G28
  BED_MESH_PROFILE LOAD=default


[gcode_macro DOULBE_Z_TILT]
gcode:
  G92 E0 # RESET EXTRUDER
  Z_TILT_ADJUST
  Z_TILT_ADJUST

[gcode_macro DOULBE_Z_MESH]
gcode:
  RESPOND TYPE=command MSG='Start Z-Tilt'
  DOUBLE_Z_TILT
  G29

[include draw.cfg]
#[include filament.cfg]
#[include bed_mesh_fast.cfg]
#[include kinematics.cfg]


[gcode_macro PAUSE_PRINT]
gcode:
  PAUSE

[gcode_macro END_PRINT]
gcode:
  G92 E0 # RESET EXTRUDER
  TURN_OFF_HEATERS

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro DISABLE_STEPPERS]
gcode:
  M84

[gcode_macro FAKE_HOMING]
gcode:
  G90                            ; set extruder to relative
  SET_KINEMATIC_POSITION X=0     ; Set x to zero as current position
  SET_KINEMATIC_POSITION Y=0                  ; set y zero as current position
  SET_KINEMATIC_POSITION Z=0     ;set z zero as current position

[gcode_macro RESET_HOMING]
gcode:
   M84                            ; Tell printer to re-require homing

[idle_timeout]
gcode:
   TURN_OFF_HEATERS
   M84
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.


[gcode_macro WAIT_FOR_BED_HEAT_100]
gcode:
    M190 S100

[gcode_macro HEATBED_AND_TILT]
gcode:
    WAIT_FOR_BED_HEAT_100
    G28
    Z_TILT_ADJUST
    G28

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
   {% set my_current = params.CURRENT|default(0.12)|float %} ; adjust crash current as required without fighting config.
    {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %} ; TODO: Find runtime current settings
    {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %} 
    {% set x_max = printer.toolhead.axis_maximum.x %} 
    {% set y_max = printer.toolhead.axis_maximum.y %} 
    {% set z_max = printer.toolhead.axis_maximum.z %} 
    
    G28 ; todo query for homed
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F8000 ; TODO grab feedrate from config
    G0 Z{z_max} F720 ; go to the Z-max at speed 12*60
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
    G4 P200 ; Probably not necessary, it is here just for sure
    FORCE_MOVE STEPPER=stepper_z DISTANCE=10 VELOCITY=6
    G4 P200 ; 
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-4 VELOCITY=6
    G4 P200 ; same as the first one
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
    G4 P200 ; same as the first one
    G28 Z

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION

[menu __main __setup __calib __mech_gantry_calibrate]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G34 Gantry Level
gcode:
    G34

### END MACROS #####